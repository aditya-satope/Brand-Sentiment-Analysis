# -*- coding: utf-8 -*-
"""Article Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DLYESYw7PHFeSbrK2ewzNakmcZebkrhX
"""

import numpy as np
import pandas as pd
import sklearn

import pickle
from matplotlib import pyplot as plt
df = pd.read_pickle('/content/article_dev_cleaned.pkl')
df

from sklearn.feature_extraction.text import TfidfVectorizer
x = df['Text']
y = df['Mobile_Tech_Flag']
model = TfidfVectorizer()
data = model.fit_transform(x)
data

from sklearn.model_selection import train_test_split
data_train,data_cv,y_train,y_cv = train_test_split(data,y,test_size = 0.1,random_state = 42)

from sklearn.ensemble import RandomForestClassifier
rfclassifier = RandomForestClassifier()
rfclassifier.fit(data_train,y_train)

from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import RandomizedSearchCV
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
model = RandomForestClassifier()
space = dict()
space['n_estimators'] = [100,200,300,400,500]
space['criterion'] = ['gini', 'entropy']
#space['min_sample_split'] = ['2','4','6']
#space['min_sample_leaf'] = ['1','2','3']
search = RandomizedSearchCV(model, space, n_iter=10, scoring='accuracy', n_jobs=-1, cv=cv, random_state=1)
result = search.fit(data_train, y_train)
print('Best Score: %s' % result.best_score_)
print('Best Hyperparameters: %s' % result.best_params_)

from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score
y_pred = rfclassifier.predict(data_cv)
print("Weighted F1 Score:")
print(f1_score(y_pred,y_cv,average = 'weighted'))
print("Accuracy Score:")
print(accuracy_score(y_pred,y_cv))

from sklearn.naive_bayes import GaussianNB
NBclassifier = GaussianNB()
data_train_NB = data_train.toarray()
data_cv_NB = data_cv.toarray()
NBclassifier.fit(data_train_NB, y_train)

y_pred = NBclassifier.predict(data_cv_NB)
print("Weighted F1 Score:")
print(f1_score(y_pred,y_cv,average = 'weighted'))
print("Accuracy Score:")
print(accuracy_score(y_pred,y_cv))